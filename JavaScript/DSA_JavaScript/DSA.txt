What is premative and non premative data
    premative data=string ,int ,float ,char
    non premative data=array ,object,recurssion  
time complexity
    time complexity is mainly calculated by counting the number of step to finish the execution.
space complexity
    space complexity is the amount of space required to solve  problem 
    space complexity =auxiliary space +input size

 Recursion: a function which call him self continue. and codiotion is most important 
                in recursion because functio did not get in infinete    
                will use for add fuctionality without loop 

    Direct Recursion
    InDirect Recursion
        Head and Tail Recursion  
            Head Recursion: perform action above of recursion function called 
            Tail Recursion: perform action below of recursion function called     

Stack: work on last in first out system because it has one way to delete or insert data

Queue: work on first in first out because it has one way to insert data and other way to delete data
    Enqueue: add item in Queue (Rear End)
    Dequeue: remove item from Queue (Front End)      
    Circular Queue: in start both rear and front end will be same  

Search:
    Linear Search: In Linear check one by one , in Linear Search complexity will be n where f{n)=O(n)              
    Binary Search: first we need to sort array with out sort Binary search will not work
                    number of input divide in half then it start to search when it start searching
                     it will check from mid point if search point is equal to mid point it will give 
                     number ,if search point is less than from mid point it will start check from
                      left side otherwise it will start from right side  it will keep deviding 
                      again and again array(left and right) untill we find the element       
        iterative approch: use loop
        recursive approch:  use recursive function    

Sorting
    Selection
    Insertion   

String Anagram : two string which have same charecter and length will same , but can place in
                     any order(cat,tac,atc)
palindrome: if string read same from front or back called palindrome   

Object and Array 
    both are feature in javascript and data structer 
     
    Object(:)
        data store in form of key and value
        in object we can can identify value by their key name but in array
        we can't identify value by their index
        key can be only string
        ex: {name:"Yash"} 
Map (=>)
    almost same as object 
    data are in key and value pair       
    key can be any data type (string,number,boolean,undefined)
    ex: {name=>"Yash"}  

Set
    Almost a array but it remove duplicate value 
    it has our own feature and property   

Linked List
    It's work on Nodes
    it has value and next ## Next: address of next node ( |value|Next|--->|value2|Next|--->|value3|Next| ) 
    first node is head and last node is tail 
        Head :first node
        Tail : last node
        Noda: value | next
        next: #address on next value 
        lead node: prevous node
    in javascript it work on object form     

Tree:
    Binary Tree: its a non linear data structer one node have maximum 2 node 
        left node small compare tor right node
        Tree Traersing is two type DFS,BFS
        DFS:Depth First Search
            Preorder: root=>left=>right
            PostOrder:left=>right=>root
            InOrder:left=>root>right
        BFS:Breadth First Search
            it is travle by lavel 0,1,2 from top to bottom both left and right

Graph: 
    is non linear data structer
    graph is made with the help of node and edges
    Directed: with the arrow
    Indirected: with the bond or single line
    Node Graph: without edge with multiple node with out connection
    Null Graph: wihtout edge and only one node
    bi directional graph: both side arror directed

    Adjaceny Matrix Graph: use array to represent graph
    Adjaceny List Graph: array,object or link list or queue can be used 

